{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/InvestmentAgreement.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title InvestmentAgreement\n * @dev Contract for managing crop investment agreements where farmers tokenize crops\n * and investors can choose between receiving produce or sharing profits\n */\ncontract InvestmentAgreement is IERC721Receiver, ReentrancyGuard, Ownable {\n\n    enum FulfilmentOption { UNSET, DELIVER_PRODUCE, SHARE_PROFITS }\n    \n    enum AgreementStatus { Proposed, Funded, ProduceReady, Settled, Defaulted }\n\n    struct Agreement {\n        // Parties\n        address farmer;\n        address investor;\n\n        // Collateral\n        address cropNFT;\n        uint256 cropTokenId;\n\n        // Economics\n        uint256 investAmount;      // ETH supplied by investor (goes to farmer immediately)\n        uint256 investorShareBps;  // Basis-points (1/10,000) of sale proceeds owed to investor if SHARE_PROFITS\n        uint256 expectedQuantity;  // Planned yield (kg). Informational / oracle check.\n\n        // Logistics\n        FulfilmentOption option;   // irrevocably chosen by investor right after funding\n        uint256 harvestDeadline;   // by when farmer must mark produce ready\n        uint256 deliveryOrSaleDeadline; // by when produce must be delivered or sale proceeds sent\n\n        AgreementStatus status;\n    }\n\n    uint256 public agreementCounter;\n    mapping(uint256 => Agreement) public agreements;\n\n    // Oracle/trusted party for delivery confirmation\n    address public oracle;\n    \n    event AgreementProposed(\n        uint256 indexed agreementId,\n        address indexed farmer,\n        address cropNFT,\n        uint256 cropTokenId,\n        uint256 investAmount,\n        uint256 investorShareBps,\n        uint256 expectedQuantity,\n        uint256 harvestDeadline,\n        uint256 deliveryOrSaleDeadline\n    );\n    \n    event AgreementFunded(uint256 indexed agreementId, address indexed investor, FulfilmentOption option);\n    event HarvestMarkedReady(uint256 indexed agreementId, address indexed farmer);\n    event DeliveryConfirmed(uint256 indexed agreementId, address indexed oracle);\n    event SaleReported(uint256 indexed agreementId, uint256 saleAmount, uint256 investorShare);\n    event AgreementSettled(uint256 indexed agreementId);\n    event AgreementDefaulted(uint256 indexed agreementId, address indexed claimant);\n\n    constructor(address _owner, address _oracle) Ownable(_owner) {\n        oracle = _oracle;\n    }\n\n    /**\n     * @dev Propose a new investment agreement\n     * @param nftContract Address of the CropNFT contract\n     * @param nftTokenId Token ID of the crop NFT\n     * @param investAmount Amount of ETH investment requested\n     * @param investorShareBps Basis points (1/10,000) of sale proceeds for investor if SHARE_PROFITS\n     * @param expectedQuantity Expected yield in kg (informational)\n     * @param harvestDeadline Deadline for marking harvest ready\n     * @param deliveryOrSaleDeadline Deadline for delivery or sale completion\n     * @return agreementId The ID of the created agreement\n     */\n    function proposeAgreement(\n        address nftContract,\n        uint256 nftTokenId,\n        uint256 investAmount,\n        uint256 investorShareBps,\n        uint256 expectedQuantity,\n        uint256 harvestDeadline,\n        uint256 deliveryOrSaleDeadline\n    ) external nonReentrant returns (uint256) {\n        require(investAmount > 0, \"InvestmentAgreement: investment amount must be greater than 0\");\n        require(investorShareBps <= 10000, \"InvestmentAgreement: investor share cannot exceed 100%\");\n        require(harvestDeadline > block.timestamp, \"InvestmentAgreement: harvest deadline must be in future\");\n        require(deliveryOrSaleDeadline > harvestDeadline, \"InvestmentAgreement: delivery deadline must be after harvest\");\n        require(nftContract != address(0), \"InvestmentAgreement: invalid NFT contract\");\n        \n        // Transfer NFT from farmer to this contract\n        IERC721(nftContract).safeTransferFrom(msg.sender, address(this), nftTokenId);\n        \n        uint256 agreementId = agreementCounter++;\n        \n        agreements[agreementId] = Agreement({\n            farmer: msg.sender,\n            investor: address(0),\n            cropNFT: nftContract,\n            cropTokenId: nftTokenId,\n            investAmount: investAmount,\n            investorShareBps: investorShareBps,\n            expectedQuantity: expectedQuantity,\n            option: FulfilmentOption.UNSET,\n            harvestDeadline: harvestDeadline,\n            deliveryOrSaleDeadline: deliveryOrSaleDeadline,\n            status: AgreementStatus.Proposed\n        });\n        \n        emit AgreementProposed(\n            agreementId,\n            msg.sender,\n            nftContract,\n            nftTokenId,\n            investAmount,\n            investorShareBps,\n            expectedQuantity,\n            harvestDeadline,\n            deliveryOrSaleDeadline\n        );\n        \n        return agreementId;\n    }\n\n    /**\n     * @dev Fund an agreement and choose fulfilment option\n     * @param agreementId The ID of the agreement to fund\n     * @param option The chosen fulfilment option (DELIVER_PRODUCE or SHARE_PROFITS)\n     */\n    function fundAgreement(uint256 agreementId, FulfilmentOption option) external payable nonReentrant {\n        Agreement storage agreement = agreements[agreementId];\n        require(agreement.status == AgreementStatus.Proposed, \"InvestmentAgreement: agreement not available for funding\");\n        require(agreement.farmer != address(0), \"InvestmentAgreement: agreement does not exist\");\n        require(msg.value == agreement.investAmount, \"InvestmentAgreement: incorrect ETH amount\");\n        require(option == FulfilmentOption.DELIVER_PRODUCE || option == FulfilmentOption.SHARE_PROFITS, \"InvestmentAgreement: invalid fulfilment option\");\n        \n        agreement.investor = msg.sender;\n        agreement.option = option;\n        agreement.status = AgreementStatus.Funded;\n        \n        // Transfer ETH immediately to farmer\n        (bool success, ) = agreement.farmer.call{value: agreement.investAmount}(\"\");\n        require(success, \"InvestmentAgreement: ETH transfer to farmer failed\");\n        \n        emit AgreementFunded(agreementId, msg.sender, option);\n    }\n\n    /**\n     * @dev Mark harvest as ready (called by farmer)\n     * @param agreementId The ID of the agreement\n     */\n    function markHarvestReady(uint256 agreementId) external nonReentrant {\n        Agreement storage agreement = agreements[agreementId];\n        require(agreement.status == AgreementStatus.Funded, \"InvestmentAgreement: agreement not funded\");\n        require(agreement.farmer == msg.sender, \"InvestmentAgreement: only farmer can mark harvest ready\");\n        require(block.timestamp <= agreement.harvestDeadline, \"InvestmentAgreement: harvest deadline passed\");\n        \n        agreement.status = AgreementStatus.ProduceReady;\n        \n        emit HarvestMarkedReady(agreementId, msg.sender);\n    }\n\n    /**\n     * @dev Confirm delivery (can be called by anyone for conceptual testing)\n     * @param agreementId The ID of the agreement\n     */\n    function confirmDelivery(uint256 agreementId) external nonReentrant {\n        // Remove oracle restriction for conceptual testing\n        // require(msg.sender == oracle, \"InvestmentAgreement: only oracle can confirm delivery\");\n        \n        Agreement storage agreement = agreements[agreementId];\n        require(agreement.status == AgreementStatus.ProduceReady, \"InvestmentAgreement: produce not ready\");\n        require(agreement.option == FulfilmentOption.DELIVER_PRODUCE, \"InvestmentAgreement: agreement not for delivery\");\n        require(block.timestamp <= agreement.deliveryOrSaleDeadline, \"InvestmentAgreement: delivery deadline passed\");\n        \n        agreement.status = AgreementStatus.Settled;\n        \n        // Return NFT to farmer\n        IERC721(agreement.cropNFT).safeTransferFrom(address(this), agreement.farmer, agreement.cropTokenId);\n        \n        emit DeliveryConfirmed(agreementId, msg.sender);\n        emit AgreementSettled(agreementId);\n    }\n\n    /**\n     * @dev Report sale and distribute proceeds (called by farmer for SHARE_PROFITS option)\n     * @param agreementId The ID of the agreement\n     * @param saleAmount Total amount received from crop sale\n     */\n    function reportSale(uint256 agreementId, uint256 saleAmount) external payable nonReentrant {\n        Agreement storage agreement = agreements[agreementId];\n        require(agreement.status == AgreementStatus.ProduceReady, \"InvestmentAgreement: produce not ready\");\n        require(agreement.farmer == msg.sender, \"InvestmentAgreement: only farmer can report sale\");\n        require(agreement.option == FulfilmentOption.SHARE_PROFITS, \"InvestmentAgreement: agreement not for profit sharing\");\n        require(block.timestamp <= agreement.deliveryOrSaleDeadline, \"InvestmentAgreement: sale deadline passed\");\n        \n        uint256 investorShare = (saleAmount * agreement.investorShareBps) / 10000;\n        require(msg.value >= investorShare, \"InvestmentAgreement: insufficient ETH for investor share\");\n        \n        agreement.status = AgreementStatus.Settled;\n        \n        // Transfer investor's share\n        if (investorShare > 0) {\n            (bool success, ) = agreement.investor.call{value: investorShare}(\"\");\n            require(success, \"InvestmentAgreement: ETH transfer to investor failed\");\n        }\n        \n        // Return excess ETH to farmer if any\n        uint256 excess = msg.value - investorShare;\n        if (excess > 0) {\n            (bool success, ) = agreement.farmer.call{value: excess}(\"\");\n            require(success, \"InvestmentAgreement: excess ETH return failed\");\n        }\n        \n        // Return NFT to farmer\n        IERC721(agreement.cropNFT).safeTransferFrom(address(this), agreement.farmer, agreement.cropTokenId);\n        \n        emit SaleReported(agreementId, saleAmount, investorShare);\n        emit AgreementSettled(agreementId);\n    }\n\n    /**\n     * @dev Claim collateral when deadlines are missed (called by investor)\n     * @param agreementId The ID of the agreement\n     */\n    function claimCollateral(uint256 agreementId) external nonReentrant {\n        Agreement storage agreement = agreements[agreementId];\n        require(agreement.investor == msg.sender, \"InvestmentAgreement: only investor can claim collateral\");\n        require(agreement.status == AgreementStatus.Funded || agreement.status == AgreementStatus.ProduceReady, \"InvestmentAgreement: invalid status for claiming\");\n        \n        bool canClaim = false;\n        \n        // Check if harvest deadline passed and still in Funded status\n        if (agreement.status == AgreementStatus.Funded && block.timestamp > agreement.harvestDeadline) {\n            canClaim = true;\n        }\n        // Check if delivery/sale deadline passed and still in ProduceReady status\n        else if (agreement.status == AgreementStatus.ProduceReady && block.timestamp > agreement.deliveryOrSaleDeadline) {\n            canClaim = true;\n        }\n        \n        require(canClaim, \"InvestmentAgreement: cannot claim collateral yet\");\n        \n        agreement.status = AgreementStatus.Defaulted;\n        \n        // Transfer NFT to investor\n        IERC721(agreement.cropNFT).safeTransferFrom(address(this), agreement.investor, agreement.cropTokenId);\n        \n        emit AgreementDefaulted(agreementId, msg.sender);\n    }\n\n    /**\n     * @dev Get agreement details\n     * @param agreementId The ID of the agreement\n     * @return Agreement struct with all details\n     */\n    function getAgreement(uint256 agreementId) external view returns (Agreement memory) {\n        return agreements[agreementId];\n    }\n\n    /**\n     * @dev Update oracle address (only owner)\n     * @param newOracle New oracle address\n     */\n    function setOracle(address newOracle) external onlyOwner {\n        require(newOracle != address(0), \"InvestmentAgreement: invalid oracle address\");\n        oracle = newOracle;\n    }\n\n    /**\n     * @dev Required for receiving NFTs\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}