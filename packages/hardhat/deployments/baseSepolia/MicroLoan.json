{
  "address": "0xCAd7AF1DA6913cC8748EDA98d48bB74da26418E9",
  "abi": [
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LoanFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LoanLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "LoanRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoanRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "fundLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoan",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "enum MicroLoan.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct MicroLoan.Loan",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "enum MicroLoan.LoanStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "requestLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe47e29c2a8fbbbd6d8cd4ef0c61a5c3f8cca5f3889b819fe437bf550824526d0",
  "receipt": {
    "to": null,
    "from": "0xB3285b9adFFBf64aA17f54a1e3a71bece93df907",
    "contractAddress": "0xCAd7AF1DA6913cC8748EDA98d48bB74da26418E9",
    "transactionIndex": 19,
    "gasUsed": "978392",
    "logsBloom": "0x
    "blockHash": "0xc938f7432048f46730db204373174954247f128ee8f7c4ddaeace7cfddfac84b",
    "transactionHash": "0xe47e29c2a8fbbbd6d8cd4ef0c61a5c3f8cca5f3889b819fe437bf550824526d0",
    "logs": [],
    "blockNumber": 27607796,
    "cumulativeGasUsed": "3961031",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cf4b8976eddaae85ab9acd6fc2b3d8d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LoanFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LoanLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTEREST_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"fundLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoan\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"enum MicroLoan.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct MicroLoan.Loan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"enum MicroLoan.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for managing NFT-collateralized microloans using ETH\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"fundLoan(uint256)\":{\"details\":\"Fund a loan request with ETH\",\"params\":{\"loanId\":\"The ID of the loan to fund\"}},\"getLoan(uint256)\":{\"details\":\"Get loan details\",\"params\":{\"loanId\":\"The ID of the loan\"},\"returns\":{\"_0\":\"Loan struct with all details\"}},\"liquidate(uint256)\":{\"details\":\"Liquidate an expired loan\",\"params\":{\"loanId\":\"The ID of the loan to liquidate\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Required for receiving NFTs\"},\"repay(uint256)\":{\"details\":\"Repay a loan with ETH and retrieve the NFT\",\"params\":{\"loanId\":\"The ID of the loan to repay\"}},\"requestLoan(address,uint256,uint256)\":{\"details\":\"Request a loan using an NFT as collateral\",\"params\":{\"amount\":\"Loan amount requested in ETH (wei)\",\"nftContract\":\"Address of the NFT contract\",\"nftTokenId\":\"Token ID of the NFT\"},\"returns\":{\"_0\":\"loanId The ID of the created loan\"}}},\"title\":\"MicroLoan\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MicroLoan.sol\":\"MicroLoan\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/MicroLoan.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title MicroLoan\\n * @dev Contract for managing NFT-collateralized microloans using ETH\\n */\\ncontract MicroLoan is IERC721Receiver, ReentrancyGuard {\\n\\n    enum LoanStatus {\\n        Requested,\\n        Funded,\\n        Repaid,\\n        Liquidated\\n    }\\n\\n    struct Loan {\\n        address borrower;\\n        address lender;\\n        address nftContract;\\n        uint256 nftTokenId;\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 deadline;\\n        LoanStatus status;\\n    }\\n\\n    uint256 public loanCounter;\\n    uint256 public constant INTEREST_RATE = 5; // 5% fixed interest\\n    uint256 public constant LOAN_DURATION = 90 days; // 90 days loan period\\n\\n    mapping(uint256 => Loan) public loans;\\n\\n    event LoanRequested(\\n        uint256 indexed loanId,\\n        address indexed borrower,\\n        address nftContract,\\n        uint256 nftTokenId,\\n        uint256 amount\\n    );\\n    event LoanFunded(uint256 indexed loanId, address indexed lender);\\n    event LoanRepaid(uint256 indexed loanId, address indexed borrower);\\n    event LoanLiquidated(uint256 indexed loanId, address indexed lender);\\n\\n    /**\\n     * @dev Request a loan using an NFT as collateral\\n     * @param nftContract Address of the NFT contract\\n     * @param nftTokenId Token ID of the NFT\\n     * @param amount Loan amount requested in ETH (wei)\\n     * @return loanId The ID of the created loan\\n     */\\n    function requestLoan(\\n        address nftContract,\\n        uint256 nftTokenId,\\n        uint256 amount\\n    ) external nonReentrant returns (uint256) {\\n        require(amount > 0, \\\"MicroLoan: amount must be greater than 0\\\");\\n        require(nftContract != address(0), \\\"MicroLoan: invalid NFT contract\\\");\\n        \\n        // Transfer NFT from borrower to this contract\\n        IERC721(nftContract).safeTransferFrom(msg.sender, address(this), nftTokenId);\\n        \\n        uint256 loanId = loanCounter++;\\n        uint256 interest = (amount * INTEREST_RATE) / 100;\\n        \\n        loans[loanId] = Loan({\\n            borrower: msg.sender,\\n            lender: address(0),\\n            nftContract: nftContract,\\n            nftTokenId: nftTokenId,\\n            principal: amount,\\n            interest: interest,\\n            deadline: 0, // Set when funded\\n            status: LoanStatus.Requested\\n        });\\n        \\n        emit LoanRequested(loanId, msg.sender, nftContract, nftTokenId, amount);\\n        \\n        return loanId;\\n    }\\n\\n    /**\\n     * @dev Fund a loan request with ETH\\n     * @param loanId The ID of the loan to fund\\n     */\\n    function fundLoan(uint256 loanId) external payable nonReentrant {\\n        Loan storage loan = loans[loanId];\\n        require(loan.status == LoanStatus.Requested, \\\"MicroLoan: loan not available for funding\\\");\\n        require(loan.borrower != address(0), \\\"MicroLoan: loan does not exist\\\");\\n        require(msg.value == loan.principal, \\\"MicroLoan: incorrect ETH amount\\\");\\n        \\n        loan.lender = msg.sender;\\n        loan.deadline = block.timestamp + LOAN_DURATION;\\n        loan.status = LoanStatus.Funded;\\n        \\n        // Transfer ETH from lender to borrower\\n        (bool success, ) = loan.borrower.call{value: loan.principal}(\\\"\\\");\\n        require(success, \\\"MicroLoan: ETH transfer failed\\\");\\n        \\n        emit LoanFunded(loanId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Repay a loan with ETH and retrieve the NFT\\n     * @param loanId The ID of the loan to repay\\n     */\\n    function repay(uint256 loanId) external payable nonReentrant {\\n        Loan storage loan = loans[loanId];\\n        require(loan.status == LoanStatus.Funded, \\\"MicroLoan: loan not funded\\\");\\n        require(loan.borrower == msg.sender, \\\"MicroLoan: only borrower can repay\\\");\\n        require(block.timestamp <= loan.deadline, \\\"MicroLoan: loan expired\\\");\\n        \\n        uint256 totalRepayment = loan.principal + loan.interest;\\n        require(msg.value == totalRepayment, \\\"MicroLoan: incorrect repayment amount\\\");\\n        \\n        loan.status = LoanStatus.Repaid;\\n        \\n        // Transfer repayment ETH from borrower to lender\\n        (bool success, ) = loan.lender.call{value: totalRepayment}(\\\"\\\");\\n        require(success, \\\"MicroLoan: ETH transfer failed\\\");\\n        \\n        // Return NFT to borrower\\n        IERC721(loan.nftContract).safeTransferFrom(address(this), loan.borrower, loan.nftTokenId);\\n        \\n        emit LoanRepaid(loanId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Liquidate an expired loan\\n     * @param loanId The ID of the loan to liquidate\\n     */\\n    function liquidate(uint256 loanId) external nonReentrant {\\n        Loan storage loan = loans[loanId];\\n        require(loan.status == LoanStatus.Funded, \\\"MicroLoan: loan not funded\\\");\\n        require(block.timestamp > loan.deadline, \\\"MicroLoan: loan not expired\\\");\\n        require(loan.lender == msg.sender, \\\"MicroLoan: only lender can liquidate\\\");\\n        \\n        loan.status = LoanStatus.Liquidated;\\n        \\n        // Transfer NFT to lender\\n        IERC721(loan.nftContract).safeTransferFrom(address(this), loan.lender, loan.nftTokenId);\\n        \\n        emit LoanLiquidated(loanId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Get loan details\\n     * @param loanId The ID of the loan\\n     * @return Loan struct with all details\\n     */\\n    function getLoan(uint256 loanId) external view returns (Loan memory) {\\n        return loans[loanId];\\n    }\\n\\n    /**\\n     * @dev Required for receiving NFTs\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n} \",\"keccak256\":\"0x34a62965718b8bf1c38954ca6b949920081dd92befa1e19a6d5f851bdbddc8e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055611056806100256000396000f3fe6080604052600436106100915760003560e01c80635b72a33a116100595780635b72a33a146101665780636f77ff551461017b578063846b909a1461019b578063e02a4dfd146101ae578063e1ec3c68146101c557600080fd5b8063150b7a021461009657806334d9289e146100e0578063371fd8e614610104578063415f124014610119578063504006ca14610139575b600080fd5b3480156100a257600080fd5b506100c26100b1366004610db9565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b3480156100ec57600080fd5b506100f660015481565b6040519081526020016100d7565b610117610112366004610e54565b61024a565b005b34801561012557600080fd5b50610117610134366004610e54565b610560565b34801561014557600080fd5b50610159610154366004610e54565b61075a565b6040516100d79190610ea5565b34801561017257600080fd5b506100f6600581565b34801561018757600080fd5b506100f6610196366004610f15565b61084a565b6101176101a9366004610e54565b610b26565b3480156101ba57600080fd5b506100f66276a70081565b3480156101d157600080fd5b506102366101e0366004610e54565b6002602081905260009182526040909120805460018201549282015460038301546004840154600585015460068601546007909601546001600160a01b0395861697861696959094169492939192909160ff1688565b6040516100d7989796959493929190610f48565b610252610d73565b60008181526002602052604090206001600782015460ff16600381111561027b5761027b610e6d565b146102cd5760405162461bcd60e51b815260206004820152601a60248201527f4d6963726f4c6f616e3a206c6f616e206e6f742066756e64656400000000000060448201526064015b60405180910390fd5b80546001600160a01b031633146103315760405162461bcd60e51b815260206004820152602260248201527f4d6963726f4c6f616e3a206f6e6c7920626f72726f7765722063616e20726570604482015261617960f01b60648201526084016102c4565b80600601544211156103855760405162461bcd60e51b815260206004820152601760248201527f4d6963726f4c6f616e3a206c6f616e206578706972656400000000000000000060448201526064016102c4565b60008160050154826004015461039b9190610fb5565b90508034146103fa5760405162461bcd60e51b815260206004820152602560248201527f4d6963726f4c6f616e3a20696e636f72726563742072657061796d656e7420616044820152641b5bdd5b9d60da1b60648201526084016102c4565b60078201805460ff1916600217905560018201546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610458576040519150601f19603f3d011682016040523d82523d6000602084013e61045d565b606091505b50509050806104ae5760405162461bcd60e51b815260206004820152601e60248201527f4d6963726f4c6f616e3a20455448207472616e73666572206661696c6564000060448201526064016102c4565b600283015483546003850154604051632142170760e11b81523060048201526001600160a01b03928316602482015260448101919091529116906342842e0e90606401600060405180830381600087803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b50506040513392508691507fe69d7686a8bc68278b8c5419579f91716b3ef2ac2fac0d8cf80b8011f8f458a490600090a350505061055d6001600055565b50565b610568610d73565b60008181526002602052604090206001600782015460ff16600381111561059157610591610e6d565b146105de5760405162461bcd60e51b815260206004820152601a60248201527f4d6963726f4c6f616e3a206c6f616e206e6f742066756e64656400000000000060448201526064016102c4565b806006015442116106315760405162461bcd60e51b815260206004820152601b60248201527f4d6963726f4c6f616e3a206c6f616e206e6f742065787069726564000000000060448201526064016102c4565b60018101546001600160a01b031633146106995760405162461bcd60e51b8152602060048201526024808201527f4d6963726f4c6f616e3a206f6e6c79206c656e6465722063616e206c697175696044820152636461746560e01b60648201526084016102c4565b60078101805460ff191660039081179091556002820154600183015491830154604051632142170760e11b81523060048201526001600160a01b03938416602482015260448101919091529116906342842e0e90606401600060405180830381600087803b15801561070a57600080fd5b505af115801561071e573d6000803e3d6000fd5b50506040513392508491507f73de9acc561f27528ab0a3b5dd63fefb4e59f95575891299a6f862a78779817690600090a35061055d6001600055565b61079f6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529060e082015290565b60008281526002602081815260409283902083516101008101855281546001600160a01b03908116825260018301548116938201939093529281015490911692820192909252600380830154606083015260048301546080830152600583015460a0830152600683015460c0830152600783015491929160e084019160ff9091169081111561083057610830610e6d565b600381111561084157610841610e6d565b90525092915050565b6000610854610d73565b600082116108b55760405162461bcd60e51b815260206004820152602860248201527f4d6963726f4c6f616e3a20616d6f756e74206d75737420626520677265617465604482015267072207468616e20360c41b60648201526084016102c4565b6001600160a01b03841661090b5760405162461bcd60e51b815260206004820152601f60248201527f4d6963726f4c6f616e3a20696e76616c6964204e465420636f6e74726163740060448201526064016102c4565b604051632142170760e11b8152336004820152306024820152604481018490526001600160a01b038516906342842e0e90606401600060405180830381600087803b15801561095957600080fd5b505af115801561096d573d6000803e3d6000fd5b5050600180546000935091508261098383610fce565b90915550905060006064610998600586610fe7565b6109a29190610ffe565b9050604051806101000160405280336001600160a01b0316815260200160006001600160a01b03168152602001876001600160a01b031681526020018681526020018581526020018281526020016000815260200160006003811115610a0a57610a0a610e6d565b9052600083815260026020818152604092839020845181546001600160a01b03199081166001600160a01b039283161783559286015160018084018054861692841692909217909155948601519382018054909316931692909217905560608301516003808301919091556080840151600483015560a0840151600583015560c0840151600683015560e084015160078301805493949193909260ff1990911691908490811115610abd57610abd610e6d565b021790555050604080516001600160a01b03891681526020810188905290810186905233915083907fddd73b283cffabe9771bdd5b4e221ab7f45f48a502ed94b32f5374c2980b216f9060600160405180910390a3509050610b1f6001600055565b9392505050565b610b2e610d73565b600081815260026020526040812090600782015460ff166003811115610b5657610b56610e6d565b14610bb55760405162461bcd60e51b815260206004820152602960248201527f4d6963726f4c6f616e3a206c6f616e206e6f7420617661696c61626c6520666f604482015268722066756e64696e6760b81b60648201526084016102c4565b80546001600160a01b0316610c0c5760405162461bcd60e51b815260206004820152601e60248201527f4d6963726f4c6f616e3a206c6f616e20646f6573206e6f74206578697374000060448201526064016102c4565b80600401543414610c5f5760405162461bcd60e51b815260206004820152601f60248201527f4d6963726f4c6f616e3a20696e636f72726563742045544820616d6f756e740060448201526064016102c4565b6001810180546001600160a01b03191633179055610c806276a70042610fb5565b600682015560078101805460ff19166001179055805460048201546040516000926001600160a01b031691908381818185875af1925050503d8060008114610ce4576040519150601f19603f3d011682016040523d82523d6000602084013e610ce9565b606091505b5050905080610d3a5760405162461bcd60e51b815260206004820152601e60248201527f4d6963726f4c6f616e3a20455448207472616e73666572206661696c6564000060448201526064016102c4565b604051339084907f15feab5d3eb17171632762cf769709a315dd15f487a556c0dfb8a259c8f186cc90600090a3505061055d6001600055565b600260005403610d9657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b80356001600160a01b0381168114610db457600080fd5b919050565b600080600080600060808688031215610dd157600080fd5b610dda86610d9d565b9450610de860208701610d9d565b935060408601359250606086013567ffffffffffffffff80821115610e0c57600080fd5b818801915088601f830112610e2057600080fd5b813581811115610e2f57600080fd5b896020828501011115610e4157600080fd5b9699959850939650602001949392505050565b600060208284031215610e6657600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60048110610ea157634e487b7160e01b600052602160045260246000fd5b9052565b60006101008201905060018060a01b0380845116835280602085015116602084015280604085015116604084015250606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151610f0e60e0840182610e83565b5092915050565b600080600060608486031215610f2a57600080fd5b610f3384610d9d565b95602085013595506040909401359392505050565b6001600160a01b038981168252888116602083015287166040820152606081018690526080810185905260a0810184905260c081018390526101008101610f9260e0830184610e83565b9998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610fc857610fc8610f9f565b92915050565b600060018201610fe057610fe0610f9f565b5060010190565b8082028115828204841417610fc857610fc8610f9f565b60008261101b57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d9722705a077cceaa84e3c98be19f8a5670c6dead6b2891df52e3c8c7a4a9fb964736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract for managing NFT-collateralized microloans using ETH",
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "fundLoan(uint256)": {
        "details": "Fund a loan request with ETH",
        "params": {
          "loanId": "The ID of the loan to fund"
        }
      },
      "getLoan(uint256)": {
        "details": "Get loan details",
        "params": {
          "loanId": "The ID of the loan"
        },
        "returns": {
          "_0": "Loan struct with all details"
        }
      },
      "liquidate(uint256)": {
        "details": "Liquidate an expired loan",
        "params": {
          "loanId": "The ID of the loan to liquidate"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Required for receiving NFTs"
      },
      "repay(uint256)": {
        "details": "Repay a loan with ETH and retrieve the NFT",
        "params": {
          "loanId": "The ID of the loan to repay"
        }
      },
      "requestLoan(address,uint256,uint256)": {
        "details": "Request a loan using an NFT as collateral",
        "params": {
          "amount": "Loan amount requested in ETH (wei)",
          "nftContract": "Address of the NFT contract",
          "nftTokenId": "Token ID of the NFT"
        },
        "returns": {
          "_0": "loanId The ID of the created loan"
        }
      }
    },
    "title": "MicroLoan",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1655,
        "contract": "contracts/MicroLoan.sol:MicroLoan",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3379,
        "contract": "contracts/MicroLoan.sol:MicroLoan",
        "label": "loanCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3390,
        "contract": "contracts/MicroLoan.sol:MicroLoan",
        "label": "loans",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Loan)3377_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(LoanStatus)3359": {
        "encoding": "inplace",
        "label": "enum MicroLoan.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Loan)3377_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MicroLoan.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)3377_storage"
      },
      "t_struct(Loan)3377_storage": {
        "encoding": "inplace",
        "label": "struct MicroLoan.Loan",
        "members": [
          {
            "astId": 3361,
            "contract": "contracts/MicroLoan.sol:MicroLoan",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3363,
            "contract": "contracts/MicroLoan.sol:MicroLoan",
            "label": "lender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3365,
            "contract": "contracts/MicroLoan.sol:MicroLoan",
            "label": "nftContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3367,
            "contract": "contracts/MicroLoan.sol:MicroLoan",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3369,
            "contract": "contracts/MicroLoan.sol:MicroLoan",
            "label": "principal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3371,
            "contract": "contracts/MicroLoan.sol:MicroLoan",
            "label": "interest",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3373,
            "contract": "contracts/MicroLoan.sol:MicroLoan",
            "label": "deadline",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3376,
            "contract": "contracts/MicroLoan.sol:MicroLoan",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(LoanStatus)3359"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}